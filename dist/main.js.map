{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/main.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());", "window.Webflow ||= [];\nwindow.Webflow.push(async () => {\n  /*** FORM VALIDATION ***/\n  const validationRules = {\n    \"#First-Name\": validateNameField,\n    \"#Last-Name\": validateNameField,\n    \"#Street-Address\": validateAddressField,\n    \"#City\": validateAddressField,\n    \"#State-of-residence\": validateDropdown,\n    \"#ZIP-Code\": validateAddressField,\n    \"#Income-Amount\": validateIncomeField,\n    \"#DOB\": validateDOB,\n    \"#Phone-Number\": validatePhoneField,\n    '[form-field=\"dropdown\"]': validateDropdown,\n    \"input[required]\": validateRequiredField,\n  };\n\n  /**\n   * Validates a form field based on a validation function.\n   * @param {HTMLElement} formField - The form field element to validate.\n   * @param {Function} validationFunc - The validation function to apply.\n   * @returns {boolean} True if the field is valid, false otherwise.\n   */\n  function validateField(formField, validationFunc) {\n    const isValid = validationFunc(formField);\n    const errorMessage = formField\n      .closest(\".form-field_item\")\n      .querySelector('[data-text=\"error-message\"]');\n\n    if (isValid) {\n      errorMessage.style.display = \"none\";\n    } else {\n      errorMessage.style.display = \"block\";\n    }\n\n    return isValid;\n  }\n\n  /**\n   * Validates a form step.\n   * @param {HTMLElement} formStep - The form step element to validate.\n   * @returns {boolean} True if the step is valid, false otherwise.\n   */\n  function validateStep(formStep) {\n    if (formStep.querySelector(\".radar-field\")) {\n      console.log(\"Validating address step\");\n      return validateAddressStep(formStep);\n    }\n\n    const formFields = formStep.querySelectorAll(\".form-field\");\n    const radioButtons = formStep.querySelectorAll('input[type=\"radio\"]');\n    let isValid = true;\n\n    formFields.forEach((field) => {\n      const validationFunc = getValidationFunc(field);\n      if (validationFunc && !validateField(field, validationFunc)) {\n        isValid = false;\n      }\n    });\n\n    // Validate radio buttons\n    if (radioButtons.length > 0 && !validateRadioButtons(radioButtons)) {\n      isValid = false;\n    }\n\n    return isValid;\n  }\n\n  /**\n   * Validates an address form step.\n   * @param {HTMLElement} formStep - The form step element to validate.\n   * @returns {boolean} True if the step is valid, false otherwise.\n   */\n  function validateAddressStep(formStep) {\n    const formFields = formStep.querySelectorAll(\".form-field\");\n    let isValid = true;\n\n    // Check if an address has been selected from Radar\n    if (!isAddressSelected) {\n      isValid = false;\n    }\n\n    // Check if all fields are populated\n    formFields.forEach((field) => {\n      if (field.value.trim() === \"\") {\n        isValid = false;\n      }\n    });\n\n    // Validate each form field\n    formFields.forEach((field) => {\n      const validationFunc = getValidationFunc(field);\n      if (validationFunc && !validateField(field, validationFunc)) {\n        isValid = false;\n      }\n    });\n    return isValid;\n  }\n\n  /**\n   * Store State Groups to URL Mappings\n   */\n\n  const stateRedirects = {\n    \"/thank-you-debtcom\": [\n      \"Alaska\",\n      \"Alabama\",\n      \"Arkansas\",\n      \"Arizona\",\n      \"California\",\n      \"District of Columbia\",\n      \"Florida\",\n      \"Indiana\",\n      \"Massachusetts\",\n      \"Maryland\",\n      \"Michigan\",\n      \"Missouri\",\n      \"Mississippi\",\n      \"North Carolina\",\n      \"Nebraska\",\n      \"New Mexico\",\n      \"New York\",\n      \"Oklahoma\",\n      \"South Dakota\",\n      \"Texas\",\n      \"Washington\",\n      \"Wisconsin\",\n    ],\n  };\n\n  /**\n   * Returns the validation function for a form field based on its selector.\n   * @param {HTMLElement} formField - The form field element.\n   * @returns {Function|null} The validation function or null if not found.\n   */\n  function getValidationFunc(formField) {\n    for (const selector in validationRules) {\n      if (formField.matches(selector)) {\n        return validationRules[selector];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Validates a required field.\n   * @param {HTMLElement} requiredField - The required field element to validate.\n   * @returns {boolean} True if the required field is filled out, false otherwise.\n   */\n  function validateRequiredField(requiredField) {\n    return requiredField.value.trim() !== \"\";\n  }\n\n  /**\n   * Validates a dropdown field.\n   * @param {HTMLElement} dropdown - The dropdown element to validate.\n   * @returns {boolean} True if the dropdown is valid, false otherwise.\n   */\n  function validateDropdown(dropdown) {\n    const firstOption = dropdown.options[0].value;\n\n    return dropdown.value !== firstOption;\n  }\n\n  /**\n   * Validates a name field.\n   * @param {HTMLElement} nameField - The name field element to validate.\n   * @returns {boolean} True if the name field is valid, false otherwise.\n   */\n  function validateNameField(nameField) {\n    const value = nameField.value.trim();\n    const regex = /^[A-Za-z]{3,}$/;\n    return regex.test(value);\n  }\n\n  /**\n   * Validates an address field.\n   * @param {HTMLElement} addressField - The address field element to validate.\n   * @returns {boolean} True if the address field is valid, false otherwise.\n   */\n  function validateAddressField(addressField) {\n    return true;\n  }\n\n  /**\n   * Validates an income field.\n   * @param {HTMLElement} incomeField - The income field element to validate.\n   * @returns {boolean} True if the income field is valid, false otherwise.\n   */\n  function validateIncomeField(incomeField) {\n    const value = incomeField.value.trim().replace(/,/g, \"\");\n    const regex = /^\\d{4,}$/;\n    return regex.test(value);\n  }\n\n  /**\n   * Validates a phone field.\n   * @param {HTMLElement} phoneField - The phone field element to validate.\n   * @returns {boolean} True if the income field is valid, false otherwise.\n   */\n  function validatePhoneField(phoneField) {\n    const value = phoneField.value.trim().replace(/[\\(\\)-\\s]/g, \"\");\n\n    // Check if the phone number has exactly 10 digits\n    return value.length === 10;\n  }\n\n  /**\n   * Validates a group of radio buttons.\n   * @param {NodeListOf<HTMLInputElement>} radioButtons - The radio buttons to validate.\n   * @returns {boolean} True if at least one radio button is selected, false otherwise.\n   */\n  function validateRadioButtons(radioButtons) {\n    let isSelected = false;\n    radioButtons.forEach((radioButton) => {\n      if (radioButton.checked) {\n        isSelected = true;\n      }\n    });\n    return isSelected;\n  }\n\n  /**\n   * Validates the Date of Birth to ensure the user is 18 years or older.\n   * @param {HTMLElement} dobField - The date of birth input field element to validate.\n   * @returns {boolean} True if the user is 18 or older, false otherwise.\n   */\n  function validateDOB(dobField) {\n    const dobValue = dobField.value.trim().replace(/\\D/g, \"\");\n\n    if (dobValue.length !== 8) {\n      return false;\n    }\n\n    const month = parseInt(dobValue.slice(0, 2), 10);\n    const day = parseInt(dobValue.slice(2, 4), 10);\n    const year = parseInt(dobValue.slice(4), 10);\n\n    if (isNaN(month) || isNaN(day) || isNaN(year)) {\n      return false;\n    }\n\n    if (month < 1 || month > 12 || day < 1 || day > 31) {\n      return false;\n    }\n\n    const dob = new Date(year, month - 1, day);\n    const today = new Date();\n    const ageDiffMs = today - dob;\n    const ageDate = new Date(ageDiffMs);\n    const age = Math.abs(ageDate.getUTCFullYear() - 1970);\n\n    return age >= 18;\n  }\n\n  /*** BUTTON FUNCTIONALITY ***/\n  /**\n   * Toggles the state of the next button in a form step.\n   * @param {HTMLElement} formStep - The form step element.\n   */\n  function toggleNextButton(formStep) {\n    const nextButton = formStep.querySelector('[data-button=\"next\"]');\n    const isValid = validateStep(formStep);\n\n    if (nextButton) {\n      nextButton.style.pointerEvents = \"none\";\n      if (isValid) {\n        activateButton(nextButton);\n        nextButton.classList.add(\"is-active\");\n      } else {\n        deactivateButton(nextButton);\n        nextButton.classList.remove(\"is-active\");\n      }\n    }\n  }\n\n  /**\n   * Activates a button by removing the 'disabled' class and adjusting its style.\n   * @param {HTMLElement} button - The button element to activate.\n   */\n  function activateButton(button) {\n    if (button) {\n      button.classList.remove(\"disabled\");\n      button.style.pointerEvents = \"auto\";\n      button.style.opacity = \"1\";\n    }\n  }\n\n  /**\n   * Deactivates a button by adding the 'disabled' class and adjusting its style.\n   * @param {HTMLElement} button - The button element to deactivate.\n   */\n  function deactivateButton(button) {\n    if (button) {\n      button.classList.add(\"disabled\");\n      button.style.pointerEvents = \"none\";\n      button.style.opacity = \"0.5\";\n    }\n  }\n\n  /*** EVENT LISTENERS ***/\n  const formSteps = document.querySelectorAll('[data-form=\"step\"]');\n\n  // Hide all form steps initially\n  formSteps.forEach((step) => {\n    step.style.display = \"none\";\n  });\n\n  // Update the progress bar\n  function updateProgress(currentStep, totalSteps) {\n    const progress = ((currentStep - 1) / (totalSteps - 1)) * 100;\n    const progressLine = document.querySelector(\".progress-line\");\n    progressLine.style.width = progress + \"%\";\n  }\n\n  // Get the total number of steps\n  const totalSteps = document.querySelectorAll('[data-form=\"step\"]').length;\n\n  // Set the progress bar to step 1\n  updateProgress(1, totalSteps);\n\n  // Show the first form step\n  const firstStep = formSteps[0];\n  firstStep.style.display = \"flex\";\n\n  /**\n   * FORM SUBMISSION LISTENER\n   */\n  const form = document.querySelector(\"form\");\n  form.addEventListener(\"submit\", async (event) => {\n    event.preventDefault();\n\n    const stateDropdown = document.querySelector(\"#State-of-residence\");\n    const selectedState = stateDropdown.value;\n\n    for (const [url, states] of Object.entries(stateRedirects)) {\n      if (states.includes(selectedState)) {\n        event.preventDefault(); // Prevent the form from submitting\n        window.location.href = url; // Redirect to the custom URL for the selected state group\n        // break; // Exit the loop once a match is found\n        return;\n      }\n    }\n\n    // Helper function to format phone number for API\n    function formatPhoneNumberForAPI(phoneNumber) {\n      // Remove all non-digit characters\n      const cleaned = (\"\" + phoneNumber).replace(/\\D/g, \"\");\n      // Ensure the number is trimmed to 10 digits maximum\n      const trimmed = cleaned.substring(0, 10);\n      // Format the number as +1XXXYYYZZZZ\n      return `+1${trimmed}`;\n    }\n\n    // Helper function to format date of birth for API\n    function formatDateOfBirthForAPI(dob) {\n      const [month, day, year] = dob.split(\"-\");\n      return `${year}-${month}-${day}`;\n    }\n\n    // Collect form data for API\n    const formData = {\n      first_name: document.getElementById(\"First-Name\").value || \"\",\n      last_name: document.getElementById(\"Last-Name\").value || \"\",\n      email: document.getElementById(\"Email\")\n        ? document.getElementById(\"Email\").value || \"\"\n        : \"\",\n      phone: document.getElementById(\"Phone-Number\")\n        ? formatPhoneNumberForAPI(\n            document.getElementById(\"Phone-Number\").value || \"\"\n          )\n        : \"\",\n      dob: formatDateOfBirthForAPI(document.getElementById(\"DOB\").value || \"\"), // Ensure this is in \"yyyy-mm-dd\" format\n      address: {\n        street: document.getElementById(\"Street-Address\").value || \"\",\n        city: document.getElementById(\"City\").value || \"\",\n        state: document.getElementById(\"State-of-residence\").value || \"\",\n        zipcode: document.getElementById(\"ZIP-Code\").value || \"\",\n      },\n      website: window.location.origin || \"\",\n    };\n\n    console.log(\"Submitting form data:\", formData); // Log the form data for debugging\n\n    // Push data to data layer\n    window.dataLayer = window.dataLayer || [];\n    window.dataLayer.push({\n      event: \"formSubmission\",\n      formData: formData,\n    });\n\n    try {\n      const response = await fetch(\n        \"https://credit-api.netlify.app/.netlify/functions/credit-api\",\n        {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(formData),\n        }\n      );\n\n      const result = await response.json();\n      console.log(\"Serverless function response:\", result);\n\n      // Trigger Google Tag Manager events\n      if (\n        result.data &&\n        result.data.balance_unsecured_credit_cards &&\n        result.data.balance_unsecured_credit_cards.max > 9999\n      ) {\n        // Trigger custom conversion for Google Tag Manager\n        window.dataLayer = window.dataLayer || [];\n        window.dataLayer.push({\n          event: \"custom_conversion\",\n          event_category: \"engagement\",\n          event_label: \"High Unsecured Credit Card Balance\",\n        });\n\n        window.location.href = \"/thank-you-debtcom\";\n      } else {\n        // Trigger custom event for lower credit card balance\n        window.dataLayer = window.dataLayer || [];\n        window.dataLayer.push({\n          event: \"custom_conversion\",\n          event_category: \"engagement\",\n          event_label: \"Low Unsecured Credit Card Balance\",\n        });\n\n        window.location.href = \"/thank-you-cc\";\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  });\n\n  /**\n   * Form Field Listeners\n   */\n\n  formSteps.forEach((step) => {\n    const formFields = step.querySelectorAll(\".form-field\");\n\n    formFields.forEach((field) => {\n      field.addEventListener(\"input\", () => {\n        toggleNextButton(step);\n      });\n\n      field.addEventListener(\"change\", () => {\n        toggleNextButton(step);\n      });\n    });\n\n    // Check if the step has the data-radio-step attribute\n    if (step.hasAttribute(\"data-radio-step\")) {\n      const radioButtons = step.querySelectorAll(\n        'input[type=\"radio\"]:not([data-link-out])'\n      );\n\n      const nextButton = step.querySelector('[data-button=\"next\"]');\n\n      if (nextButton) {\n        nextButton.style.display = \"none\";\n      }\n\n      radioButtons.forEach((radioButton) => {\n        radioButton.addEventListener(\"click\", () => {\n          const nextButton = step.querySelector('[data-button=\"next\"]');\n          if (nextButton) {\n            nextButton.click();\n\n            const currentStepIndex = Array.from(formSteps).indexOf(step) + 2;\n            const totalSteps = formSteps.length;\n            updateProgress(currentStepIndex, totalSteps);\n          }\n        });\n      });\n    }\n\n    // Find the next button within the current step\n    const nextButton = step.querySelector('[data-button=\"next\"]');\n\n    if (nextButton) {\n      nextButton.addEventListener(\"click\", async (event) => {\n        // Check if the current step has the data-step attribute set to \"income\"\n        if (\n          step.hasAttribute(\"data-step\") &&\n          step.getAttribute(\"data-step\") === \"income\"\n        ) {\n          // Income step-specific logic\n          const incomeField = step.querySelector(\"[data-income]\");\n          if (incomeField) {\n            const incomeValue = parseFloat(incomeField.value.replace(/,/g, \"\"));\n            if (incomeValue < 10000) {\n              // Redirect to the specified URL\n              const url = incomeField.getAttribute(\"data-income-link\");\n              window.location.href = url;\n              return;\n            }\n          }\n        }\n        // Check if the current step has the data-twilio attribute\n        if (step.hasAttribute(\"data-twilio\")) {\n          event.preventDefault();\n          const phoneNumber = document.getElementById(\"Phone-Number\").value;\n\n          console.log(\"Validating phone number:\", phoneNumber);\n\n          try {\n            const response = await fetch(\n              `https://credit-api.netlify.app/.netlify/functions/validate-phone?phoneNumber=${encodeURIComponent(phoneNumber)}`\n            );\n            const data = await response.json();\n            console.log(\"Response data:\", data);\n\n            if (data.valid) {\n              console.log(\"The phone number is a valid mobile number.\");\n              // Proceed to the next step\n              const currentStep = step;\n              const nextStep = currentStep.nextElementSibling;\n\n              if (nextStep && nextStep.matches('[data-form=\"step\"]')) {\n                currentStep.style.display = \"none\";\n                nextStep.style.display = \"flex\";\n              }\n              const currentStepIndex = Array.from(formSteps).indexOf(step) + 1;\n              const totalSteps = formSteps.length;\n              updateProgress(currentStepIndex, totalSteps);\n            } else {\n              console.warn(\n                \"The phone number is not a valid mobile number or an error occurred.\"\n              );\n              alert(\"Please enter a valid mobile phone number.\");\n            }\n          } catch (error) {\n            console.error(\"Error during fetch:\", error);\n            alert(\"An error occurred while validating the phone number.\");\n          }\n        } else {\n          // Validate the current form step\n          const isValid = validateStep(step);\n\n          if (isValid) {\n            // If validation passes, hide the current step and display the next step\n            const currentStep = step;\n            const nextStep = currentStep.nextElementSibling;\n\n            if (nextStep && nextStep.matches('[data-form=\"step\"]')) {\n              currentStep.style.display = \"none\";\n              nextStep.style.display = \"flex\";\n            }\n            const currentStepIndex = Array.from(formSteps).indexOf(step) + 1;\n            const totalSteps = formSteps.length;\n            // Only update progress if it's not the first step\n            updateProgress(currentStepIndex, totalSteps);\n          } else {\n            // If validation fails, prevent the default behavior of the button\n            event.preventDefault();\n            // Display an error message or take any other desired action\n            console.log(\n              \"Validation failed. Please fill in all required fields.\"\n            );\n          }\n        }\n      });\n    }\n\n    // Find the back button within the current step\n    const backButton = step.querySelector('[data-form=\"back-btn\"]');\n    const currentStepIndex = Array.from(formSteps).indexOf(step);\n\n    if (currentStepIndex === 0) {\n      // Hide back button on the first step\n      if (backButton) {\n        backButton.style.display = \"none\";\n      }\n    } else {\n      // Show back button on subsequent steps\n      if (backButton) {\n        backButton.style.display = \"flex\"; // Make sure this is consistent with your CSS display settings for visible buttons\n      }\n    }\n\n    if (backButton) {\n      backButton.addEventListener(\"click\", () => {\n        // Hide the current step and display the previous step\n        const currentStep = step;\n        const previousStep = currentStep.previousElementSibling;\n\n        if (previousStep && previousStep.matches('[data-form=\"step\"]')) {\n          currentStep.style.display = \"none\";\n          previousStep.style.display = \"flex\";\n        }\n\n        //Progress bar update\n        const currentStepIndex =\n          Array.from(formSteps).indexOf(previousStep) + 1;\n        const totalSteps = formSteps.length;\n        updateProgress(currentStepIndex, totalSteps);\n      });\n    }\n  });\n\n  /*** LINK OUT FUNCTIONALITY ***/\n  function handleLinkOutClick(event) {\n    event.preventDefault();\n    const url = event.target.dataset.linkOut;\n    window.location.href = url;\n  }\n\n  const linkOutElements = document.querySelectorAll(\"[data-link-out]\");\n\n  linkOutElements.forEach((element) => {\n    const url = element.dataset.linkOut;\n    if (url) {\n      element.addEventListener(\"click\", handleLinkOutClick);\n    }\n  });\n\n  /*** INCOME FORMATTING ***/\n  const incomeInput = document.getElementById(\"Income-Amount\");\n\n  /**\n   * Formats a number with commas as thousands separators.\n   * @param {string} number - The number to format.\n   * @returns {string} The formatted number.\n   */\n  function formatNumber(number) {\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  }\n\n  function handleIncomeInputChange(event) {\n    const inputValue = event.target.value.replace(/,/g, \"\");\n    const formattedValue = formatNumber(inputValue);\n    event.target.value = formattedValue;\n  }\n\n  incomeInput.addEventListener(\"input\", handleIncomeInputChange);\n\n  /*** PHONE FORMATTING ***/\n  /**\n   * Formats a string as a phone number.\n   * @param {string} number - The string to format.\n   * @returns {string} The formatted string.\n   */\n  // Formats a string as a phone number.\n  function formatPhoneNumber(number) {\n    // Remove all non-digit characters\n    number = number.replace(/\\D/g, \"\");\n\n    // Ensure the number is trimmed to 10 digits maximum\n    number = number.substring(0, 10);\n\n    // Format the number if it has at least 3 digits\n    if (number.length >= 6) {\n      return number.replace(/(\\d{3})(\\d{3})(\\d{1,4})/, \"($1)-$2-$3\");\n    } else if (number.length >= 3) {\n      return number.replace(/(\\d{3})(\\d{1,3})/, \"($1)-$2\");\n    } else {\n      return number;\n    }\n  }\n\n  function handlePhoneInputChange(event) {\n    // Format the input value as a phone number\n    event.target.value = formatPhoneNumber(event.target.value);\n  }\n\n  // Define phoneInputs\n  const phoneInputs = document.querySelectorAll(\"[data-phone]\");\n\n  // Add the event listener to all phone inputs\n  phoneInputs.forEach((input) => {\n    input.addEventListener(\"input\", handlePhoneInputChange);\n  });\n\n  /**\n   * Formats a string as a date in the format mm-dd-yyyy.\n   * @param {string} dateString - The string to format.\n   * @returns {string} The formatted string.\n   */\n  function formatDateString(dateString) {\n    dateString = dateString.replace(/\\D/g, \"\");\n\n    if (dateString.length > 8) {\n      dateString = dateString.slice(0, 8);\n    }\n\n    if (dateString.length > 2) {\n      dateString = dateString.slice(0, 2) + \"-\" + dateString.slice(2);\n    }\n    if (dateString.length > 5) {\n      dateString = dateString.slice(0, 5) + \"-\" + dateString.slice(5, 9);\n    }\n\n    return dateString;\n  }\n\n  function handleDOBInputChange(event) {\n    const formattedDateString = formatDateString(event.target.value);\n    event.target.value = formattedDateString;\n\n    const isValid = validateDOB(event.target); // Pass the element to validateDOB\n    const errorMessage = event.target\n      .closest(\".form-field_item\")\n      .querySelector('[data-text=\"error-message\"]');\n\n    if (isValid) {\n      errorMessage.style.display = \"none\";\n    } else {\n      errorMessage.style.display = \"block\";\n    }\n  }\n\n  const dobInput = document.getElementById(\"DOB\");\n  dobInput.addEventListener(\"input\", handleDOBInputChange);\n\n  /*** ADDRESS AUTOCOMPLETE ***/\n  let isAddressSelected = false;\n  Radar.initialize(\"prj_live_pk_9a04f6bab292b47ffdad877f7bd7d63fa6d2bc54\");\n\n  function initAutocomplete() {\n    const addressInput = document.getElementById(\"Street-Address\");\n    const cityInput = document.getElementById(\"City\");\n    const stateInput = document.getElementById(\"State-of-residence\");\n    const zipInput = document.getElementById(\"ZIP-Code\");\n    const nextButton = document.querySelector('[data-form=\"next-btn\"]');\n    const element = document.getElementById(\"autocomplete-container\");\n\n    if (element) {\n      Radar.ui.autocomplete({\n        container: \"Street-Address\",\n        responsive: true,\n        minCharacters: 2,\n        debounceMS: 0,\n        onSelection: (address) => {\n          updateAddressFields(\n            address,\n            addressInput,\n            cityInput,\n            stateInput,\n            zipInput\n          );\n          activateButton(nextButton);\n          isAddressSelected = true;\n\n          // Manually hide the autocomplete container\n          const autocompleteContainer = document.querySelector(\n            \"radar-autocomplete-wrapper\"\n          );\n          if (autocompleteContainer) {\n            autocompleteContainer.style.display = \"none\";\n            console.log(\"Autocomplete container hidden\");\n          }\n          addressInput.dispatchEvent(new Event(\"focusout\"));\n        },\n      });\n    }\n  }\n\n  function updateAddressFields(\n    address,\n    addressInput,\n    cityInput,\n    stateInput,\n    zipInput\n  ) {\n    addressInput.value = \"\";\n    cityInput.value = \"\";\n    stateInput.value = \"\";\n    zipInput.value = \"\";\n\n    if (address.number && address.street) {\n      addressInput.value = `${address.number} ${address.street}`;\n    } else {\n      addressInput.value = \"\";\n    }\n\n    cityInput.value = address.city || \"\";\n    stateInput.value = address.state || \"\";\n    zipInput.value = address.postalCode || \"\";\n    // addressInput.dispatchEvent(new Event(\"input\"));\n    // cityInput.dispatchEvent(new Event(\"input\"));\n    // stateInput.dispatchEvent(new Event(\"input\"));\n    zipInput.dispatchEvent(new Event(\"input\"));\n  }\n\n  initAutocomplete();\n\n  document\n    .querySelectorAll(\"#Street-Address, #City, #State-of-residence, #ZIP-Code\")\n    .forEach((field) => {\n      field.addEventListener(\"input\", () => {\n        isAddressSelected = true;\n      });\n    });\n  const nextButtons = document.querySelectorAll(\".form-next_btn\");\n  nextButtons.forEach((button) => {\n    button.addEventListener(\"click\", (event) => {\n      if (!isAddressSelected) {\n        event.preventDefault();\n        deactivateButton(button);\n      }\n    });\n  });\n});\n"],
  "mappings": "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",
  "names": ["totalSteps", "nextButton", "currentStepIndex"]
}
